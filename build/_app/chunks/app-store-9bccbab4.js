var e=Object.defineProperty,t=Object.defineProperties,a=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,r=(t,a,n)=>a in t?e(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,i=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&r(e,a,t[a]);if(n)for(var a of n(t))o.call(t,a)&&r(e,a,t[a]);return e};import{a4 as c,a5 as d,a6 as l,a7 as u,a8 as p,a9 as y,aa as h,ab as w,ac as g,ad as m,ae as f,af as b,ag as v,ah as k,ai as E,aj as S,ak as P,C as O}from"./vendor-9977621c.js";let j,C,W,A,z,I,D=!1;async function T(){const e=await fetch("/firebase.config.json"),t=await e.json();I=t.functionsHost,console.debug("configured functions host:",I);const a=(n=t,s=({auth:e})=>{u(e,(e=>{F.forEach((t=>t(e)))}))},D||(D=!0,j=c(n),C=d(j),W=l(j),s&&s({app:j,auth:C,db:W})),{app:j,auth:C,db:W});var n,s;A=a.auth,z=a.db}let $,x,R={user:void 0,userStudies:void 0,onboarded:!1};function N(e){$=b(z,"users",e),x=e}function _(e,t=!0){return f($,e,{merge:t})}async function G(){return(await k(E(z,"studies"))).docs.map((e=>e.data()))}const L=[],F=[];function J(e){R=P(R,e),L.forEach((e=>e(R)))}async function H(e){S(b(z,"users",e.uid),(e=>{const t=e.data();J((e=>{e.user=t}))}))}async function U(e){const t=E(z,"users",e.uid,"studies");S(t,(e=>{const t={};e.forEach((e=>{const a=e.data();t[a.studyId]=a})),J((e=>{e.userStudies=t}))}))}var V={async initialize(e=!0){if(!e)return;{async function t(e){switch(console.log("message from content script received:",e.type,e),e.type){case"rally-sdk.complete-signup":const t=e.detail;if(!t)throw new Error("handling rally-sdk.complete-signup from content script: No study ID provided.");if(void 0===I)throw new Error("Firebase Functions host not defined, cannot generate JWTs for extensions.");if(!(await G()).filter((e=>e.studyId===t)))throw new Error(`Received rally-sdk.complete-signup for non-existent study: ${t}`);const a=await new Promise((e=>{u(A,(t=>{e(t)}))})),n=await a.getIdToken(),s=JSON.stringify({studyId:t,idToken:n}),o=await fetch(`${I}/rallytoken`,{method:"POST",headers:{"Content-Type":"application/json"},body:s}),r=(await o.json()).rallyToken;console.debug("dispatching rally-sdk.complete-signup-response with token"),window.dispatchEvent(new CustomEvent("rally-sdk.complete-signup-response",{detail:{studyId:t,rallyToken:r}}));break;case"rally-sdk.web-check-response":console.debug("Received rally-sdk.web-check-response.");break;default:console.warn(`Unknown message received from content script: ${e.type}`)}}await T(),window.addEventListener("rally-sdk.complete-signup",t),window.addEventListener("rally-sdk.web-check-response",t)}const a={};let n;const s=await new Promise((e=>{u(A,(t=>{e(t)}))}));null!==s&&(N(s.uid),n=await p($),n=n.data(),H(s),U(s),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{})));let o=await G();return S(E(z,"studies"),(e=>{const t=[];e.forEach((function(e){t.push(e.data())})),J((e=>{e.studies=t}))})),a._initialized=!0,n&&(a.user=n),o&&(a.studies=o),a},async onAuthStateChanged(e){await T(),u(A,e)},async loginWithGoogle(){const e=new y;let t;e.setCustomParameters({prompt:"select_account"});try{t=await h(A,e)}catch(a){console.error("there was an error",a)}console.debug("Logged in as",t.user.email),N(t.user.uid),H(t.user),U(t.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))},async loginWithEmailAndPassword(e,t){let a;try{a=await w(A,e,t)}catch(n){return void console.error("there was an error",n)}a.user.emailVerified?(N(a.user.uid),H(a.user),U(a.user),console.debug("initialized, dispatching rally-sdk.web-check"),window.dispatchEvent(new CustomEvent("rally-sdk.web-check",{}))):(console.warn("Email account not verified, sending verification email"),await g(a.user))},async signupWithEmailAndPassword(e,t){let a;try{a=await m(A,e,t)}catch(n){return void console.error("there was an error",n)}console.info("Sending verification email"),await g(a.user)},updateOnboardedStatus:async e=>_({onboarded:e}),async updateStudyEnrollment(e,t,a){const n=!!a,s=i({},R.userStudies||{});return e in s||(s[e]={}),s[e]=i({},s[e]),s[e].enrolled=t,s[e].studyId=e,s[e].attached=n,t&&(s[e].joinedOn=new Date),await async function(e,t,a=!0){const n=b(z,"users",x,"studies",e);await v(n,t,{merge:a})}(e,s[e]),!0},updatePlatformEnrollment:async e=>_({enrolled:e}),updateDemographicSurvey:async e=>_({demographicsData:e}),onAuthChange(e){F.push(e)},onNextState(e){L.push(e)}};const q=function(){const{subscribe:e,set:t}=O(void 0);return V.onAuthStateChanged((e=>{t(null!==e)})),{subscribe:e}}(),B=function(e=V){const n=O({_initialized:!1}),{subscribe:s,set:o}=n;return e.initialize(true).then((e=>{o(e)})),e.onNextState((e=>{const n=(s=i({},e),t(s,a({_initialized:!0})));var s;o(n)})),{subscribe:s,set:o,loginWithGoogle:async()=>e.loginWithGoogle(),loginWithEmailAndPassword:async(t,a)=>e.loginWithEmailAndPassword(t,a),signupWithEmailAndPassword:async(t,a)=>e.signupWithEmailAndPassword(t,a),updateOnboardedStatus:async t=>e.updateOnboardedStatus(t),async updateStudyEnrollment(t,a){const n=!!a;console.debug(`Rally - changing study ${t} enrollment to ${n}`);try{return await e.updateStudyEnrollment(t,n)}catch(s){console.error(s)}},async updatePlatformEnrollment(t){const a=!!t;console.debug(`Rally - changing enrollment to ${a}`);try{return await e.updatePlatformEnrollment(a)}catch(n){console.error(n)}},async updateDemographicSurvey(t){try{await e.updateDemographicSurvey(t)}catch(a){console.error("Rally - failed to update the demographic survey",a)}}}}();export{q as i,B as s};
